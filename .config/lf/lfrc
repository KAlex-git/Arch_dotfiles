#set previewer ~/.config/lf/preview
set previewer ~/.config/lf/pv.sh



# -*- mode: sh -*-

  ##      ##
   #     #  #
   #     #
   #    ####
   #     #
   #     #
  ###    #

# Alex's lf settings

# Basic vars
set shell sh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons						# Enable icons. Requires nerd fonts and LF_ICONS variable.
#set hidden true
set preview true
set drawbox true
set ratios 1:2:3
set ignorecase true
set number
set scrolloff 10

# cmds/functions
cmd open ${{
    case $(file --mime-type $f -b) in
    	text/troff) man ./ $f;;
        text/*) $EDITOR $fx;;
	image/x-xcf|image/svg+xml) setsid gimp $f >/dev/null 2>&1 & ;;
	image/svg+xml) display -- $f ;;
	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | sxiv -aio 2>/dev/null | lf-select ;;
	audio/*) mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f ;;
	video/*) setsid mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f -quiet >/dev/null 2>&1 & ;;
	application/pdf) setsid zathura $fx >/dev/null 2>&1 & ;;
	application/csv) $TERMINAL -e sc-im $fx ;;
        *) for f in $fx; do setsid $OPENER $f >/dev/null 2>&1 & done;;
    esac
}}

cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

cmd delete ${{
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf $fx
}}

#{{{ TODO MOVE}}}
cmd moveto ${{
	set -f
	clear; echo "Move to where?"
	dest="$(cut -d'	' -f2- ~/.config/shell/bm-dirs| fzf)" &&
	eval mv -iv $fx $dest &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}
#{{{ TODO COPY}}}
cmd copyto ${{				# copy fzf
	set -f
	clear; echo "Copy to where?"
	dest="$(cut -d'	' -f2- ~/.config/shell/bm-dirs| fzf)" &&
	eval cp -ivr $fx $dest &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}
cmd copy_path ${{			# copy clipboard full path
	set -f
	if command -v pbcopy > /dev/null 2> /dev/null; then
		echo "$f" | tr -d '\n' | pbcopy
	elif command -v xclip > /dev/null 2> /dev/null; then
		echo "$f" | tr -d '\n' | xclip -sel clip
	fi
	notify-send "ðŸŽ¿ full path copied."
}}
#cmd yank-path ${{
#    echo "$fx" | xclip -i -selection clipboard
#}}
cmd copy_name ${{			# copy clipboard only name
    echo "$fx" |
      xargs -r -d '\n' basename -a -- |
      xclip -i -selection clipboard
}}
#cmd yank-basename-without-extension ${{
#    echo "$fx" |
#      xargs -r -d '\n' basename -a -- |
#      awk -e '{
#        for (i=length($0); i > 0; i--) {
#          if (substr($0, i, 1) == ".") {
#            if (i == 1) print $0
#            else print substr($0, 0, i-1)
#
#            break
#          }
#        }
#
#        if (i == 0)
#          print $0
#      }' | xclip -i -selection clipboard
#}}

#{{{ TODO paste }}}
cmd pasteto &{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        rsync -av --ignore-existing --progress $list . \
        | stdbuf -i0 -o0 -e0 tr '\r' '\n' \
        | while read line; do
            lf -remote "send $id echo $line"
        done
    elif [ $mode = 'move' ]; then
        mv -n $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
    notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}
#** symlink ver.1
cmd paste_link %{{
  load=$(lf -remote 'load')
  mode=$(echo "$load" | sed -n '1p')
  list=$(echo "$load" | sed '1d')

  echo $list | while read -r fil; do
    lf -remote "send %ln -s $fil .";
  done
}}

#** symlink ver.1
cmd symlnk ${{
    set -f
    for file in "$fx"
    do
        ln -s $file .
    done
}}
map L :{{
    symlnk
    unselect
}}

#{{{ TODO - Arhived files }}}
cmd zip ${{
	set -f
  if [[ -d $fx ]]; then
  mkdir $f-zip
  cp -r $fx $f-zip
  (cd $f-zip/ && zip -r $f.zip .)
  rm -rf $f-zip/
	fi

	if [[ -f $fx ]]; then
		fname=$(basename $f)
		name=${fname%.*}
		mkdir $name
		cp -r $fx $name
		(cd $name/ && zip -r $name.zip .; mv $name.zip ../)
		rm -rf $name/
		notify-send "to pack" "$name"
	fi
}}
cmd tar %tar cvf "$f.tar" "$f"
cmd tgz %tar cvzf "$f.tgz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

#** unpack
cmd ext ${{
set -f
ext $fx
}}

#{{{ TODO - configs edit }}}
cmd open_config  ${{
  $EDITOR $(bookmenu -b ~/.config/bookmenu/configs -f fzf -o)
}}
#{{{ TODO change permissions }}}
cmd chmd ${{
	set -f
	printf "chmod permissions?[y/N]"
	read ans
	[ $ans = "y" ] &&
	ch $fx
}}

#{{{ TODO rename }}}
cmd vimv ${{			# vimv
	set -f
	filename=$(basename "$fx")
	vimv $filename
}}
cmd r_ ${{			# r_
	set -f
	mv "$f" $(echo "$fx"|tr " " _)\
}}

#{{{ TODO CREATE }}}
cmd touch ${{
	newfile="$f"
	echo -n 'Name file: '
	read
	touch $REPLY
	sudo chmod +x $REPLY >/dev/null 2>&1
	echo "Create file with permissions: $(ls -la "$REPLY")"
	$EDITOR $REPLY ; echo " $REPLY " | xclip -selection clipboard
}}
cmd mdir ${{
	newdir="$f"
	echo -n 'Name directories: '
	read ask
	mkdir -p $ask
	sudo chmod +x $ask >/dev/null 2>&1
	ls -ald "$newdir"
	cd $ask ; echo " $ask " | xclip -selection clipboard
}}

#{{{ TODO change source file}}}
cmd source_preview ${{
	set -f
sed -i '1cset previewer ~/.config/lf/preview' /home/alex/.config/lf/lfrc
notify-send 'source preview'
}}
cmd source_pv.sh ${{
	set -f
 sed -i '1cset previewer /home/alex/.config/lf/pv.sh' /home/alex/.config/lf/lfrc
notify-send 'source pv.sh'
}}
## cd location
cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}
###################################
	 #																#
	 #						Bindings						#
	 #																#
###################################
#** unbind
map a
map c
map d
map i
map e
map g
map y
map r
map p
map u
map sn				#:set sortby natural; set info
map ss 				#:set sortby size; set info size
map st 				#:set sortby time; set info time
map sa 				#:set sortby atime
map sc 				#:set sortby ctime; set info ctime
map se 				#:set sortby ext; set info#** navig
#** navigation
map gg				top
map <s-g>			bottom
map <a-k>			page-up
map <a-j>			page-down
#** copy and move
map dd				delete
map C					copyto
map J					$lf -remote "send $id cd $(cut -d'	' -f2 ~/.config/shell/bm-dirs| fzf)"
map K					fzf_jump
map F					$lf -remote "send $id select '$(fzf)'"
map M					moveto
map P					pasteto
map pp				paste
map pl				paste_link
map yy				copy
map yn				copy_name
map yp				copy_path
map <c-d>			cut		 # mark of delete or move to...
#map L					$sudo ln -sT $PWD/"$1" "$2" 2>/dev/null		## create link a mark files.....
# create ...
map ad				mdir
map af				touch
map ai				!gstat $f || stat $f; echo ; du -sh $f ; echo ; file -I -b -p $f
map au				!du -hsx * | sort -rh | less
map cc				chmd			## chmod
# rename ...
map ea 				open_config
map ee				$$EDITOR $f
map rr 				vimv
map r_ 				r_
# reload and shell
map aa					reload
map <c-r>				reload
map <enter>			shell
# pack && unpack
map ax					ext
map az 					zip
map at					tar
map ag 					tgz
map ab 					tarbz2
# select / unselect
map ud					clear
map ui					:unselect; invert
map un 					push :glob-unselect<space>*.
map uy					clear
map us 					push :glob-select<space>*.
map uu 					unselect


#map I				  $~/.config/lf/pv.sh $f | less -R
map c<c-c>		source_preview
map c<c-d>		source_pv.sh
# execute current file (must be executable)
#map o &mimeopen "$f"
#map O $mimeopen --ask "$f"
#map x $$f
map x !$f

#
map gF						$gFFolderINCloud.sh
map gC						$gCCloud_in_folder.sh


#* FAST DIRS
# >> fast dirs start
map f
map fd
map fc
map fm
map fh				$lf -remote "send $id cd ~"
map fcc				$lf -remote "send $id cd ~/.config/"
map fci				$lf -remote "send $id cd ~/.config/install_system"
map flb				$lf -remote "send $id cd ~/.local/bin"
map fls				$lf -remote "send $id cd ~/.local/share"
map fdd				$lf -remote "send $id cd ~/Documents"
map fdb				$lf -remote "send $id cd ~/Documents/BOOKS"
map fD				$lf -remote "send $id cd ~/Downloads"
map fmm				$lf -remote "send $id cd ~/Music"
map fp				$lf -remote "send $id cd ~/Pictures"
map fv				$lf -remote "send $id cd ~/Videos"
map ft				$lf -remote "send $id cd ~/tmp"
map f/				$lf -remote "send $id cd /"
map fmn				$lf -remote "send $id cd /mnt"
map fma				$lf -remote "send $id cd /mnt/alex"

# >> fast dirs end

# TODO sort
#** sort
map st :{{
    set sortby time
    set info time
}}


#** set ratios/preview
map sr :{{
    set nopreview
    set ratios 1:3
}}

map sR :{{
    set reverse!
}}

map sp :{{
    set preview
    set ratios 1:3:2
}}

map s<a-p> :{{
    set preview
    set ratios 1:1:2
}}

map sP :{{
    set preview
    set ratios 1:2
}}


##########################

cmd video_preview ${{
    CACHE=$(mktemp /tmp/thumb_cache.XXXXX)
    ffmpegthumbnailer -i "$f" -o $CACHE -s 0
    ~/.config/lf/draw_img $CACHE && rm $CACHE
}}
map + :video_preview


# Not really image preview
map - $~/.config/lf/draw_img "$f"
